#langchain
from langchain.chat_models import ChatOpenAI
from langchain.agents.tools import Tool
from langchain.agents import initialize_agent
from langchain.agents import AgentType
from pydantic import BaseModel, Field, validator
from langchain.output_parsers import PydanticOutputParser
from langchain.schema import OutputParserException

#custom
from server_config import openai_api_key
from agents.expert_agent_configs import expert_agent_config_list, expert_agent_prompt_maker
from agents.search_tool_for_agents import get_search_tool_for_agents

#agent insight structure
class AgentInsight(BaseModel):
        """
        Query for an insight generation process
        """
        agent_name: str = Field(
             description="the name of the agent that generated the insight")
        agent_insight: str = Field(
             description="the short insight generated by the agent")
        reference_sources: list[str] = Field(
             description="list of reference sources used to generate this insight", default=[])
        insight_motive: str = Field(
             description="short motive of why the insight was generated, quoting the text in the transcript")


agent_insight_parser = PydanticOutputParser(pydantic_object=AgentInsight)

#start up the agent blueprint
llm = ChatOpenAI(temperature=0.5, openai_api_key=openai_api_key, model="gpt-4-0613")
agent = initialize_agent([
        get_search_tool_for_agents(),
    ], llm, agent=AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION, max_iterations=3, early_stopping_method="generate", verbose=True)


def run_single_expert_agent(expert_agent_name, convo_context, insights_history: list):
    #initialize the requested expert agent - using the name given
    expert_agent_config = expert_agent_config_list[expert_agent_name]
    #run the agent
    return expert_agent_run_wrapper(expert_agent_config, convo_context, insights_history)


async def expert_agent_arun_wrapper(expert_agent_config, convo_context, insights_history: list):
    #run the agent
    insight_obj = await agent.arun(expert_agent_prompt_maker(expert_agent_config, convo_context, insights_history, 
                                                        format_instructions=agent_insight_parser.get_format_instructions()))
    try:
        result = agent_insight_parser.parse(insight_obj)
        return result
    except OutputParserException as e:
        print("Exception in expert_agent_arun_wrapper...:", e)
        return None
  

def expert_agent_run_wrapper(expert_agent_config, convo_context, insights_history: list):
    #run the agent
    insight_obj = agent.run(expert_agent_prompt_maker(expert_agent_config, convo_context, insights_history, 
                                               format_instructions=agent_insight_parser.get_format_instructions()))
    try:
        result = agent_insight_parser.parse(insight_obj)
        return result
    except OutputParserException as e:
        print("Exception in expert_agent_arun_wrapper...:", e)
        return None


